/*
 * Camunda Rest API
 * TODO: Add Description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeploymentApi {
    private ApiClient apiClient;

    public DeploymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeploymentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deploymentByIdGet
     * @param accept  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deploymentByIdGetCall(String accept, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deployment/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deploymentByIdGetValidateBeforeCall(String accept, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deploymentByIdGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deploymentByIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = deploymentByIdGetCall(accept, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deployment051e15ae99b411e792b20242ac110002Get
     * TODO: Add Description
     * @param accept  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deploymentByIdGet(String accept, String id) throws ApiException {
        deploymentByIdGetWithHttpInfo(accept, id);
    }

    /**
     * Deployment051e15ae99b411e792b20242ac110002Get
     * TODO: Add Description
     * @param accept  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deploymentByIdGetWithHttpInfo(String accept, String id) throws ApiException {
        com.squareup.okhttp.Call call = deploymentByIdGetValidateBeforeCall(accept, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deployment051e15ae99b411e792b20242ac110002Get (asynchronously)
     * TODO: Add Description
     * @param accept  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deploymentByIdGetAsync(String accept, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deploymentByIdGetValidateBeforeCall(accept, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deploymentCreatePost
     * @param accept  (required)
     * @param deploymentName  (required)
     * @param enableDuplicateFiltering  (required)
     * @param deployChangedOnly  (required)
     * @param payTaxesBpmn  (required)
     * @param smsBodyJs  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deploymentCreatePostCall(String accept, String deploymentName, Boolean enableDuplicateFiltering, Boolean deployChangedOnly, String payTaxesBpmn, String smsBodyJs, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deployment/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (deploymentName != null)
        localVarFormParams.put("deployment-name", deploymentName);
        if (enableDuplicateFiltering != null)
        localVarFormParams.put("enable-duplicate-filtering", enableDuplicateFiltering);
        if (deployChangedOnly != null)
        localVarFormParams.put("deploy-changed-only", deployChangedOnly);
        if (payTaxesBpmn != null)
        localVarFormParams.put("pay_taxes.bpmn", payTaxesBpmn);
        if (smsBodyJs != null)
        localVarFormParams.put("smsBody.js", smsBodyJs);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deploymentCreatePostValidateBeforeCall(String accept, String deploymentName, Boolean enableDuplicateFiltering, Boolean deployChangedOnly, String payTaxesBpmn, String smsBodyJs, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deploymentCreatePost(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling deploymentCreatePost(Async)");
        }
        
        // verify the required parameter 'enableDuplicateFiltering' is set
        if (enableDuplicateFiltering == null) {
            throw new ApiException("Missing the required parameter 'enableDuplicateFiltering' when calling deploymentCreatePost(Async)");
        }
        
        // verify the required parameter 'deployChangedOnly' is set
        if (deployChangedOnly == null) {
            throw new ApiException("Missing the required parameter 'deployChangedOnly' when calling deploymentCreatePost(Async)");
        }
        
        // verify the required parameter 'payTaxesBpmn' is set
        if (payTaxesBpmn == null) {
            throw new ApiException("Missing the required parameter 'payTaxesBpmn' when calling deploymentCreatePost(Async)");
        }
        
        // verify the required parameter 'smsBodyJs' is set
        if (smsBodyJs == null) {
            throw new ApiException("Missing the required parameter 'smsBodyJs' when calling deploymentCreatePost(Async)");
        }
        

        com.squareup.okhttp.Call call = deploymentCreatePostCall(accept, deploymentName, enableDuplicateFiltering, deployChangedOnly, payTaxesBpmn, smsBodyJs, progressListener, progressRequestListener);
        return call;

    }

    /**
     * DeploymentCreatePost
     * Create a Camunda Deployment.  Update the Deployment Name and Key/Value of the .bpmn file in the Body.
     * @param accept  (required)
     * @param deploymentName  (required)
     * @param enableDuplicateFiltering  (required)
     * @param deployChangedOnly  (required)
     * @param payTaxesBpmn  (required)
     * @param smsBodyJs  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deploymentCreatePost(String accept, String deploymentName, Boolean enableDuplicateFiltering, Boolean deployChangedOnly, String payTaxesBpmn, String smsBodyJs) throws ApiException {
        deploymentCreatePostWithHttpInfo(accept, deploymentName, enableDuplicateFiltering, deployChangedOnly, payTaxesBpmn, smsBodyJs);
    }

    /**
     * DeploymentCreatePost
     * Create a Camunda Deployment.  Update the Deployment Name and Key/Value of the .bpmn file in the Body.
     * @param accept  (required)
     * @param deploymentName  (required)
     * @param enableDuplicateFiltering  (required)
     * @param deployChangedOnly  (required)
     * @param payTaxesBpmn  (required)
     * @param smsBodyJs  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deploymentCreatePostWithHttpInfo(String accept, String deploymentName, Boolean enableDuplicateFiltering, Boolean deployChangedOnly, String payTaxesBpmn, String smsBodyJs) throws ApiException {
        com.squareup.okhttp.Call call = deploymentCreatePostValidateBeforeCall(accept, deploymentName, enableDuplicateFiltering, deployChangedOnly, payTaxesBpmn, smsBodyJs, null, null);
        return apiClient.execute(call);
    }

    /**
     * DeploymentCreatePost (asynchronously)
     * Create a Camunda Deployment.  Update the Deployment Name and Key/Value of the .bpmn file in the Body.
     * @param accept  (required)
     * @param deploymentName  (required)
     * @param enableDuplicateFiltering  (required)
     * @param deployChangedOnly  (required)
     * @param payTaxesBpmn  (required)
     * @param smsBodyJs  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deploymentCreatePostAsync(String accept, String deploymentName, Boolean enableDuplicateFiltering, Boolean deployChangedOnly, String payTaxesBpmn, String smsBodyJs, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deploymentCreatePostValidateBeforeCall(accept, deploymentName, enableDuplicateFiltering, deployChangedOnly, payTaxesBpmn, smsBodyJs, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deploymentGet
     * @param accept  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deploymentGetCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deployment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deploymentGetValidateBeforeCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deploymentGet(Async)");
        }
        

        com.squareup.okhttp.Call call = deploymentGetCall(accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * DeploymentGet
     * TODO: Add Description
     * @param accept  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deploymentGet(String accept) throws ApiException {
        deploymentGetWithHttpInfo(accept);
    }

    /**
     * DeploymentGet
     * TODO: Add Description
     * @param accept  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deploymentGetWithHttpInfo(String accept) throws ApiException {
        com.squareup.okhttp.Call call = deploymentGetValidateBeforeCall(accept, null, null);
        return apiClient.execute(call);
    }

    /**
     * DeploymentGet (asynchronously)
     * TODO: Add Description
     * @param accept  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deploymentGetAsync(String accept, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deploymentGetValidateBeforeCall(accept, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for processInstanceByIdGet
     * @param accept  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call processInstanceByIdGetCall(String accept, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/process-instance/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call processInstanceByIdGetValidateBeforeCall(String accept, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling processInstanceByIdGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling processInstanceByIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = processInstanceByIdGetCall(accept, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * ProcessInstance3fde771b9aed11e792b20242ac110002Get
     * TODO: Add Description
     * @param accept  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void processInstanceByIdGet(String accept, String id) throws ApiException {
        processInstanceByIdGetWithHttpInfo(accept, id);
    }

    /**
     * ProcessInstance3fde771b9aed11e792b20242ac110002Get
     * TODO: Add Description
     * @param accept  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> processInstanceByIdGetWithHttpInfo(String accept, String id) throws ApiException {
        com.squareup.okhttp.Call call = processInstanceByIdGetValidateBeforeCall(accept, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * ProcessInstance3fde771b9aed11e792b20242ac110002Get (asynchronously)
     * TODO: Add Description
     * @param accept  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call processInstanceByIdGetAsync(String accept, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = processInstanceByIdGetValidateBeforeCall(accept, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for processInstanceGet
     * @param accept  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call processInstanceGetCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/process-instance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call processInstanceGetValidateBeforeCall(String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling processInstanceGet(Async)");
        }
        

        com.squareup.okhttp.Call call = processInstanceGetCall(accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * ProcessInstanceGet
     * TODO: Add Description
     * @param accept  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void processInstanceGet(String accept) throws ApiException {
        processInstanceGetWithHttpInfo(accept);
    }

    /**
     * ProcessInstanceGet
     * TODO: Add Description
     * @param accept  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> processInstanceGetWithHttpInfo(String accept) throws ApiException {
        com.squareup.okhttp.Call call = processInstanceGetValidateBeforeCall(accept, null, null);
        return apiClient.execute(call);
    }

    /**
     * ProcessInstanceGet (asynchronously)
     * TODO: Add Description
     * @param accept  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call processInstanceGetAsync(String accept, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = processInstanceGetValidateBeforeCall(accept, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
